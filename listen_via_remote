blueprint:
  name: Listen (via Remote)
  description: >
    Play a radio station via Music Assistant, and if the TV is on, send an MQTT command to turn it off.
  domain: automation
  input:
    radio_station:
      name: Radio Station
      description: Name of the station to play
      selector:
        text:

    radio_tuner_script:
      name: Music Assistant Radio Tuner
      description: Script that plays the radio station
      selector:
        entity:
          domain: script

    tv_sensor:
      name: TV Binary Sensor
      description: Binary sensor that tracks TV on/off state
      selector:
        entity:
          domain: binary_sensor

    mqtt_room:
      name: Room (for MQTT topic)
      description: Will generate topic like 'pihub/ROOM/cmd'
      selector:
        text:

mode: single

variables:
  mqtt_topic: >
    {{ 'pihub/' ~ (mqtt_room | lower | replace(' ', '_')) ~ '/cmd' }}

action:
  - service: script.turn_on
    target:
      entity_id: !input radio_tuner_script
    data:
      variables:
        station: !input radio_station

  - choose:
      - conditions:
          - condition: state
            entity_id: !input tv_sensor
            state: "on"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ mqtt_topic }}"
              payload: macro:atv-off
              qos: 1
              retain: false
