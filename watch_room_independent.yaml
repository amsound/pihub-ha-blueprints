blueprint:
  name: Watch - Room Independent
  description: |
    - Turns TV On
    - Sets Speakers to Optical Input, plus clears any Music Assistant play queue
    Only acts when necessary (idempotent).
  domain: script
  input:
    room:
      name: Room Name (for MQTT topic)
      description: ""
      selector:
        text: {}
    tv_power_sensor:
      name: Room TV Sensor
      description: ""
      selector:
        entity:
          domain: binary_sensor
    speaker_media_player:
      name: Speaker
      description: ""
      selector:
        entity:
          domain: media_player
    speaker_optical_sensor:
      name: Speaker Optical on Optical
      description: ""
      selector:
        entity:
          domain: binary_sensor
    reset_music_assistant_script:
      name: Music Assistant Reset Script
      description: ""
      selector:
        entity:
          domain: script
    payload_on:
      name: Apple TV Power On Payload
      description: MQTT payload to turn on the Apple TV (non-retained, QoS 1).
      default: "macro:atv-on"
      selector:
        text: {}

variables:
  room: !input room
  cmd_topic: >
    {{ 'pihub/' ~ room ~ '/cmd' }}

mode: single

sequence:
  - alias: Parallel Watch Setup
    parallel:
      - alias: Power on TV if Off
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input tv_power_sensor
                    state: "off"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{ cmd_topic }}"
                      payload: !input payload_on
                      qos: "1"
                      retain: false

      - alias: Set Speaker Source to Optical if Needed
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input speaker_optical_sensor
                    state: "off"
                sequence:
                  - service: media_player.select_source
                    target:
                      entity_id: !input speaker_media_player
                    data:
                      source: "Opt"
                  # Blocking script call (direct service):
                  - service: !input reset_music_assistant_script
                  - alias: Poll Speaker Until Optical Sensor is Active
                    repeat:
                      sequence:
                        - service: homeassistant.update_entity
                          target:
                            entity_id: !input speaker_media_player
                        - delay:
                            milliseconds: 500
                      until:
                        - condition: state
                          entity_id: !input speaker_optical_sensor
                          state: "on"
