blueprint:
  name: PiHub → Home Assistant service-call bridge
  description: >
    Subscribes to a PiHub MQTT service-call topic and forwards calls to HA services.
    Lets you provide a per-room entity mapping (so the Pi can send logical names
    which get mapped to real entity_ids in HA).
  domain: automation
  source_url: https://example.local/blueprints/pihub/pihub_service_call_bridge.yaml

  input:
    mqtt_topic:
      name: MQTT topic (service call)
      description: Full topic Pi publishes to, e.g. pihub/living_room/ha/service/call
      selector:
        text:

    ents:
      name: Entity map (optional)
      description: >
        Mapping of logical names → HA entity_ids. If the Pi sends
        {"data": {"entity_id": "speakers"}}, this map turns it into
        media_player.living_room_speakers_unified (or a list of strings).
      default: {}
      selector:
        object:

    logbook_name:
      name: Logbook name
      default: PiHub MQTT
      selector:
        text:

mode: parallel
max: 50

variables:
  ents: !input ents
  logbook_name: !input logbook_name

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition: []

action:
  - variables:
      obj: "{{ trigger.payload_json | default({}) }}"
  - condition: template
    value_template: >
      {{ obj is mapping
         and (obj.domain | default('') | string | length) > 0
         and (obj.service | default('') | string | length) > 0 }}
  - variables:
      data0: "{{ obj.data | default({}) }}"
      entity_id_in: >
        {% if 'entity_id' in data0 %}{{ data0.entity_id }}{% else %}{{ None }}{% endif %}
      entity_id_mapped: >
        {# string -> string #}
        {% if entity_id_in is string %}
          {{ ents.get(entity_id_in, entity_id_in) }}
        {# list -> list of strings #}
        {% elif entity_id_in is sequence and (entity_id_in is not string) %}
          [{% for item in entity_id_in %}"{{ ents.get(item, item) }}"{% if not loop.last %},{% endif %}{% endfor %}]
        {% else %}
          {{ None }}
        {% endif %}
      call_data: >
        {%- set base = data0 | default({}) -%}
        {%- if entity_id_mapped is not none -%}
          {{ base | combine({'entity_id': entity_id_mapped}) }}
        {%- else -%}
          {{ base }}
        {%- endif -%}
  - service: "{{ obj.domain }}.{{ obj.service }}"
    data: "{{ call_data }}"
  - service: logbook.log
    data:
      name: "{{ logbook_name }}"
      message: "Called {{ obj.domain }}.{{ obj.service }} with {{ call_data }}"
