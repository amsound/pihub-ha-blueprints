blueprint:
  name: PiHub – Resolve Activity
  description: |
    Resolves the room activity from:
    - MQTT intents from PiHub,
    - TV power-on
    - Speakers on Wifi
    Writes the resolved value to the room Activity input select
  domain: automation
  source_url: https://github.com/amsound/pihub-remote

  input:

    # Sensors that can push us into an activity
    tv_sensor:
      name: Room TV power sensor
      description: ""
      selector:
        entity:
          domain: binary_sensor

    speakers_wifi_sensor:
      name: Speakers on Wifi Sensor
      description: ""
      selector:
        entity:
          domain: binary_sensor

    # PiHub intent topic
    mqtt_topic:
      name: PiHub Activity MQTT Topic
      description: ""
      default: "pihub/<room>/activity"
      selector:
        text: {}
  
    # Primary state targets
    activity_select:
      name: Room Activity
      description: ""
      selector:
        entity:
          domain: input_select

    last_run_select:
      name: Room Last run
      description: ""
      selector:
        entity:
          domain: input_select

    # Optional
    room_label:
      name: Room label (for logging)
      selector:
        text: {}

    debug_logs:
      name: Debug logs
      default: false
      selector:
        boolean:

mode: single

# ──────────────────────────────────────────────────────────────────────────────
# Triggers
# ──────────────────────────────────────────────────────────────────────────────
trigger:
  # Strict "watch" push: only when TV flips to on
  - platform: state
    entity_id: !input tv_sensor
    to: "on"

  # Strict "listen" push: when speakers Wifi sensor turns on
  - platform: state
    entity_id: !input speakers_wifi_sensor
    to: "on"

  # Strong intents from PiHub (watch|listen|power_off)
  - platform: mqtt
    topic: !input mqtt_topic

# ──────────────────────────────────────────────────────────────────────────────
# Vars
# ──────────────────────────────────────────────────────────────────────────────
variables:
  # Bind inputs to easy names for templates
  i_activity: !input activity_select
  i_last_run: !input last_run_select
  i_tv: !input tv_sensor
  i_spk_wifi: !input speakers_wifi_sensor
  i_topic: !input mqtt_topic
  i_room: !input room_label
  i_debug: !input debug_logs

  # Current + last
  remote_activity: "{{ states(i_activity) | lower }}"
  last_run: "{{ states(i_last_run) | lower }}"

  # Which trigger fired
  trig_is_tv: "{{ trigger.platform == 'state' and trigger.entity_id == i_tv }}"
  trig_is_speakers: "{{ trigger.platform == 'state' and trigger.entity_id == i_spk_wifi }}"
  trig_is_mqtt: "{{ trigger.platform == 'mqtt' }}"

  # Strong intent from PiHub (only on MQTT)
  intent: >
    {% if trig_is_mqtt %}
      {{ (trigger.payload | default('') | string).lower() }}
    {% else %}
      none
    {% endif %}

  # Sensor snapshots
  tv_on: "{{ is_state(i_tv, 'on') }}"
  speaker_wifi: "{{ is_state(i_spk_wifi, 'on') }}"

  # Resolution:
  # 1) MQTT intent wins; 2) speaker push -> listen; 3) TV push -> watch; 4) otherwise keep current
  resolved: >
    {% if intent in ['watch','listen','power_off'] %}
      {{ intent }}
    {% elif trig_is_speakers and speaker_wifi and last_run != 'listen' %}
      listen
    {% elif trig_is_tv and tv_on and last_run != 'watch' %}
      watch
    {% else %}
      {{ remote_activity }}
    {% endif %}

# ──────────────────────────────────────────────────────────────────────────────
# Actions
# ──────────────────────────────────────────────────────────────────────────────
action:
  # Optional debug snapshot
  - if: "{{ i_debug | bool }}"
    then:
      - action: logbook.log
        data:
          name: "{{ i_room }} – PiHub Resolve"
          message: >
            from={{ remote_activity }} → to={{ resolved }}
            (intent={{ intent }}, tv_on={{ tv_on }},
            speaker_wifi={{ speaker_wifi }},
            last_run={{ last_run }})

  # Only write when actually changing & valid
  - condition: template
    value_template: "{{ resolved in ['watch','listen','power_off'] and resolved != remote_activity }}"

  - action: input_select.select_option
    target:
      entity_id: !input activity_select
    data:
      option: "{{ resolved }}"
