blueprint:
  name: PiHub â€“ Resolve Activity (room-agnostic)
  description: >
    Resolves the target activity from PiHub intents (MQTT), TV on, and
    Speakers source. Writes the decision to the room's activity input_select
    only when it changes (to avoid flapping). Pair this with the PiHub Enactor blueprint.
  domain: automation
  input:
    activity_select:
      name: Room Activity input_select
      description: input_select.<room>_activity
      selector:
        entity:
          domain: input_select
    last_run_select:
      name: Last Run input_select
      description: input_select.<room>_last_run_activity (read only here)
      selector:
        entity:
          domain: input_select
    mqtt_topic:
      name: MQTT intent topic
      description: >
        Full topic PiHub publishes to (e.g. pihub/living_room/activity).
        Must be exact; cannot be templated.
      default: pihub/living_room/activity
    tv_sensor:
      name: (Optional) TV power binary_sensor
      description: binary_sensor.<room>_tv that turns 'on' when the TV is on
      default: ""
      selector:
        entity:
          domain: binary_sensor
          multiple: false
          include:
            - domain: binary_sensor
    speakers_player:
      name: (Optional) Speakers media_player
      description: media_player.<room>_speakers (reads 'source' attribute)
      default: ""
      selector:
        entity:
          domain: media_player
          multiple: false
    speakers_source_value:
      name: Speakers source value to mean "listen"
      description: Exact string of the source when listening (e.g. Wifi)
      default: Wifi
    debug_logs:
      name: Debug log snapshots
      description: Write a Logbook snapshot of decisions each time
      default: false
      selector:
        boolean: {}

mode: single
max_exceeded: silent

triggers:
  # A) PiHub intent (watch|listen|power_off)
  - trigger: mqtt
    topic: !input mqtt_topic

  # B) TV turned on (optional)
  - trigger: state
    entity_id: !input tv_sensor
    to: "on"
    enabled: "{{ iif((!input tv_sensor) != '', true, false) }}"

  # C) Speakers source changed to "Wifi" (or your value) (optional)
  - trigger: state
    entity_id: !input speakers_player
    attribute: source
    to: !input speakers_source_value
    enabled: "{{ iif((!input speakers_player) != '', true, false) }}"

conditions: []

variables:
  activity_select: !input activity_select
  last_run_select: !input last_run_select
  tv_sensor: !input tv_sensor
  speakers_player: !input speakers_player
  speakers_source_value: !input speakers_source_value

  # Current states (lower-cased for comparison)
  current_activity: "{{ states(activity_select) | lower }}"
  last_run: "{{ states(last_run_select) | lower }}"

  tv_on: >-
    {% if tv_sensor %}
      {{ is_state(tv_sensor, 'on') }}
    {% else %}
      false
    {% endif %}

  speaker_source: >-
    {% if speakers_player %}
      {{ (state_attr(speakers_player, 'source') | default('') | string).strip() }}
    {% else %}
      ''
    {% endif %}

  speaker_is_listen: "{{ speaker_source == speakers_source_value }}"

  # Intent from MQTT (only present for MQTT-triggered runs)
  remote_intent: >-
    {% if trigger is defined and trigger.platform == 'mqtt' %}
      {{ (trigger.payload | string | lower) }}
    {% else %}
      none
    {% endif %}

  # Decision rules:
  # 1) If Pi sends an explicit intent, honor it (watch|listen|power_off).
  # 2) Else, if speakers source matches, prefer 'listen' (unless we just ran listen).
  # 3) Else, if TV is on, prefer 'watch' (unless we just ran watch).
  # 4) Else, keep current activity.
  resolved_activity: >-
    {% set intent = remote_intent %}
    {% if intent in ['watch','listen','power_off'] %}
      {{ intent }}
    {% elif speaker_is_listen and last_run != 'listen' %}
      listen
    {% elif tv_on and last_run != 'watch' %}
      watch
    {% else %}
      {{ current_activity }}
    {% endif %}

actions:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ resolved_activity != current_activity }}"
        sequence:
          - alias: Update activity_select to resolved
            action: input_select.select_option
            target:
              entity_id: !input activity_select
            data:
              option: "{{ resolved_activity }}"
  - if:
      - condition: template
        value_template: "{{ bool(debug_logs) }}"
    then:
      - action: logbook.log
        data:
          name: PiHub Resolver
          message: >-
            current={{ current_activity }}, last_run={{ last_run }},
            tv_on={{ tv_on }}, speaker_source='{{ speaker_source }}',
            intent={{ remote_intent }}, resolved={{ resolved_activity }}
